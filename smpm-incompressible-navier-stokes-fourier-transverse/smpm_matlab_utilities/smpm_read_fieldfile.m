function data = smpm_read_fieldfile( varargin )
% data = smpm_read_fieldfile( field_file_name[, version] )
%
% Reads the contents of the field file generated by the SMPM solver code.
%
% Takes 2 arguments:
%
%   field_file_name - String indicating the field file to read from disk.
%   version         - Optional string indicating version of the output file
%                     Takes two entries:
%                     - 'OLD' : Pre-May 2018 Change when we were writing
%                               a single fieldfile with all the fields
%                               at predetermined timestamps.
%
%                     - 'NEW' : Post-May 2018 Change where we now write
%                               a single field file for a single timestamp
%
%                     Defaults to 'OLD' format
% Returns 1 value:
%
%   data - Structure containing the fields described below:
%
%     .grid.x       - Matrix, of size (mz * n) x (mx * n), containing the
%                     x-coordinates of the mesh associated with the field
%                     variables.
%     .grid.y       - Vector, of size my, containing the y-coordinates of
%                     the mesh associated with the field variables.
%     .grid.z       - Matrix, of size (mz * n) x (mx * n), containing the
%                     z-coordinates of the mesh associated with the field
%                     variables.
%     .field.ux     - Matrix, of size (mz * n) x (mx * n) x my x time, containing
%                     the velocity in the x-direction for each time and grid
%                     point.
%     .field.uy     - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                     containing the velocity in the x-direction for each time
%                     and grid point.
%     .field.uz     - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                     containing the velocity z-direction for each time and grid
%                     point.
%     .field.rho    - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                     containing the density for each time and grid point.
%     .ic.rho_bar   - Matrix, of size (mz * n) x (mx * n) x my,
%                     containing the background density profile at each grid point.
%     .ic.rho_bar_z - Matrix, of size (mz * n) x (mx * n) x my,
%                     containing the background density profile at each grid point.
%     .ic.ubc       - Matrix, of size (mz * n) x (mx * n) x my,
%                     containing the background density profile at each grid point.
%     .ic.dubcdz    - Matrix, of size (mz * n) x (mx * n) x my,
%                     containing the background density profile at each grid point.
%
%  May 2018
%  Gustavo Rivera w/ Sumedh Joshi

% Parse the argument list.
field_file_name = varargin{1};
if ( nargin == 1 )
    version = 'OLD';
else
    version = upper(varargin{2});
end

% Check if the user passed a character
if ischar(version) == logical( 0 )
    fprintf('\n Input argument is not a character.')
    fprintf('\n Stopping execution...\n')
    return
end

% Throw an error in case the number of arguments is greater than the expected
if nargin > 2
    fprintf('\n Number of input arguments greater than the allowed (2).')
    fprintf('\n Stopping execution...\n')
    return
end

% Check that the user wrote a valid version string
if strcmp(version,'OLD') ~= logical(1) && strcmp(version,'NEW') ~= logical(1)
    fprintf('\n Fieldfile Version Specified not valid.')
    fprintf('\n Stopping execution...\n')
    return
end

% Get some information about this field file.
info                = smpm_fieldfile_info( field_file_name, version );
data.grid.x         = info.x;
data.grid.y         = info.y;
data.grid.z         = info.z;
data.grid.n         = info.n;
data.grid.mx        = info.mx;
data.grid.my        = info.my;
data.grid.mz        = info.mz;

if version == 'OLD'
    number_of_timesteps = info.number_steps;
end
% Pre-allocate the data arrays.
if version == 'OLD'
    kk = 1
    
    % Allocate field variables
    data.field.ux  = zeros( info.mz * info.n, info.mx * info.n, info.my, number_of_timesteps );
    data.field.uy  = zeros( info.mz * info.n, info.mx * info.n, info.my, number_of_timesteps );
    data.field.uz  = zeros( info.mz * info.n, info.mx * info.n, info.my, number_of_timesteps );
    data.field.rho = zeros( info.mz * info.n, info.mx * info.n, info.my, number_of_timesteps );
    
else
    
    % Allocate field variables
    data.field.ux  = zeros( info.mz * info.n, info.mx * info.n, info.my );
    data.field.uy  = zeros( info.mz * info.n, info.mx * info.n, info.my );
    data.field.uz  = zeros( info.mz * info.n, info.mx * info.n, info.my );
    data.field.rho = zeros( info.mz * info.n, info.mx * info.n, info.my );
    
end

% Allocate initial field
data.ic.rho_bar   = zeros( info.mz * info.n, info.mx * info.n, info.my );
data.ic.rho_bar_z = zeros( info.mz * info.n, info.mx * info.n, info.my );
data.ic.ubc       = zeros( info.mz * info.n, info.mx * info.n, info.my );
data.ic.dubcdz    = zeros( info.mz * info.n, info.mx * info.n, info.my );

% Read the intial conditions since they are time independent.
data.ic.rho_bar(:, :, :)   = h5read( field_file_name, '/field/step0/rho_bar' );
data.ic.rho_bar_z(:, :, :) = h5read( field_file_name, '/field/step0/rho_bar_z' );
data.ic.ubc(:, :, :)       = h5read( field_file_name, '/field/step0/ubc' );
data.ic.dubcz(:, :, :)     = h5read( field_file_name, '/field/step0/dubcdz' );

% Read field file in old-version format
if version == 'OLD'
    
    % Loop over the data reading as desired.
    for ii = 1:number_of_timesteps
        
        % Make the string for reading data.
        readstr = sprintf( '/field/step%d/', ii );
        
        % Read the data.
        data.field.ux(:, :, :, ii)  = h5read( field_file_name, sprintf( '%s/ux', readstr ) );
        data.field.uy(:, :, :, ii)  = h5read( field_file_name, sprintf( '%s/uy', readstr ) );
        data.field.uz(:, :, :, ii)  = h5read( field_file_name, sprintf( '%s/uz', readstr ) );
        data.field.rho(:, :, :, ii) = h5read( field_file_name, sprintf( '%s/rho', readstr ) );
        data.field.time(ii)         = h5read( field_file_name, sprintf( '%s/time', readstr ) );
        data.field.time_step(ii)    = h5read( field_file_name, sprintf( '%s/time_step', readstr ) );
        
    end
     
else
    
    % Read the data.
    data.field.ux(:, :, :)  = h5read( field_file_name, '/field/ux'       );
    data.field.uy(:, :, :)  = h5read( field_file_name, '/field/uy'       );
    data.field.uz(:, :, :)  = h5read( field_file_name, '/field/uz'       );
    data.field.rho(:, :, :) = h5read( field_file_name, '/field/rho'      );
    data.field.time         = h5read( field_file_name, '/field/time'     );
    data.field.time_step    = h5read( field_file_name, '/field/time_step');

end
