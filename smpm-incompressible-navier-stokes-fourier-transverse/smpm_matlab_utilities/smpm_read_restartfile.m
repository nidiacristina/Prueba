function data = smpm_read_restartfile( restart_file_name )
% data = smpm_read_restartfile( restart_file_name )
%
% Reads the contents of the restart file generated by the SMPM.
%
% Takes 2 arguments:
%
%   restart_file_name - String indicating the restart file to read from disk.
%
% Returns 1 value:
%
%   data - Structure containing the fields described below:
%
%     .grid.x     - Matrix, of size (mz * n) x (mx * n) x my, containing the
%                   x-coordinates of the mesh.
%     .grid.y     - Matrix, of size (mz * n) x (mx * n) x my, containing the
%                   y-coordinates of the mesh.
%     .grid.z     - Matrix, of size (mz * n) x (mx * n) x my, containing the
%                   z-coordinates of the mesh.
%
%     .grid.dt    - Scalar value containing the timestep size at time n.
%     .grid.dt1   - Scalar value containing the timestep size at time n-1
%     .grid.dt2   - Scalar value containing the timestep size at time n-2
%     .grid.time  - Scalar value containing the simulation time.
%
%     .field.ux0  - Matrix, of size (mz * n) x (mx * n) x my x time, 
%                   containing the velocity in the x-direction at time n.
%     .field.uy0  - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the velocity in the y-direction at time n.
%     .field.uz0  - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the velocity in the z-direction at time n.
%     .field.rho0 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the perturbation density at time n.
%
%     .field.ux1  - Matrix, of size (mz * n) x (mx * n) x my x time, 
%                   containing the velocity in the x-direction at time n-1.
%     .field.uy1  - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the velocity in the y-direction at time n-1.
%     .field.uz1  - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the velocity in the z-direction at time n-1.
%     .field.rho1 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the perturbation density at time n-1.
%
%     .field.ux2  - Matrix, of size (mz * n) x (mx * n) x my x time, 
%                   containing the velocity in the x-direction at time n-2.
%     .field.uy2  - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the velocity in the y-direction at time n-2.
%     .field.uz2  - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the velocity in the z-direction at time n-2.
%     .field.rho2 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the perturbation density at time n-2.
%
%     .field.rho_bar
%                 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the background density.
%     .field.rho_bar_z
%                 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the vertical derivative of the 
%                   background density.
%     .field.dubcdz
%                 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the vertical derivative of the 
%                   background velocity.
%     .field.ubc
%                 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the background velocity.
%
%     .field.ux_b
%                 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the boundary condition in ux.
%     .field.uy_b
%                 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the boundary condition in uy.
%     .field.uz_b
%                 - Matrix, of size (mz * n) x (mx * n) x my x ntime,
%                   containing the boundary condition in uz.
%
% 27 May 2017
% Gustavo Rivera w/ Greg Thomsen & Sumedh Joshi

% Read the grid information
data.grid.n  = h5read( restart_file_name, '/grid/n' );
data.grid.mx = h5read( restart_file_name, '/grid/mx' );
data.grid.my = h5read( restart_file_name, '/grid/my' );
data.grid.mz = h5read( restart_file_name, '/grid/mz' );

% Pre-allocate the arrays associated with grid
data.grid.x  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.grid.y  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.grid.z  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );

% Pre-allocate the data arrays associated with time integration.
data.field.ux0  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.uy0  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.uz0  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.rho0 = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );

data.field.ux1  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.uy1  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.uz1  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.rho1 = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );

data.field.ux2  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.uy2  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.uz2  = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.rho2 = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );

% Pre-allocate the data arrays associated with the constant fields.
data.field.rho_bar   = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.rho_bar_z = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.ubc       = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.dubcdz    = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );

%Pre-allocate the data arrays associated with the boundary conditions.
data.field.ux_b      = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.uy_b      = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );
data.field.uz_b      = zeros( data.grid.mz * data.grid.n, data.grid.mx * data.grid.n, data.grid.my );

% Read the grid
data.grid.x  = h5read( restart_file_name, '/grid/x' );
data.grid.y  = h5read( restart_file_name, '/grid/y' );
data.grid.z  = h5read( restart_file_name, '/grid/z' );

% Read the constant fields
data.field.rho_bar(:, :, :)   = h5read( restart_file_name, '/constant_fields/rho_bar' );
data.field.rho_bar_z(:, :, :) = h5read( restart_file_name, '/constant_fields/rho_bar_z' );
data.field.ubc(:, :, :)       = h5read( restart_file_name, '/constant_fields/ubc' );
data.field.dubcdz(:, :, :)    = h5read( restart_file_name, '/constant_fields/dubcdz' );

% Read the boundary conditions
data.field.ux_b(:, :, :)      = h5read( restart_file_name, '/constant_fields/ux_b' );
data.field.uy_b(:, :, :)      = h5read( restart_file_name, '/constant_fields/uy_b' );
data.field.uz_b(:, :, :)      = h5read( restart_file_name, '/constant_fields/uz_b' );

% Read the time step sizes.
data.field.dt             = h5read( restart_file_name,  '/restart/dt'   );
data.field.dt1            = h5read( restart_file_name,  '/restart/dt1'  );
data.field.dt2            = h5read( restart_file_name,  '/restart/dt2'  );

% Read the simulation time
data.field.time           = h5read( restart_file_name,  '/restart/time' );

% Read the field  data at time n
data.field.ux0(:, :, :)  = h5read( restart_file_name,  '/restart/ux0'  );
data.field.uy0(:, :, :)  = h5read( restart_file_name,  '/restart/uy0'  );
data.field.uz0(:, :, :)  = h5read( restart_file_name,  '/restart/uz0'  );
data.field.rho0(:, :, :) = h5read( restart_file_name,  '/restart/rho0' );

% Read the field data at time n-1
data.field.ux1(:, :, :)  = h5read( restart_file_name,  '/restart/ux1'  );
data.field.uy1(:, :, :)  = h5read( restart_file_name,  '/restart/uy1'  );
data.field.uz1(:, :, :)  = h5read( restart_file_name,  '/restart/uz1'  );
data.field.rho1(:, :, :) = h5read( restart_file_name,  '/restart/rho1' );

% Read the field data at time n-2
data.field.ux2(:, :, :)  = h5read( restart_file_name,  '/restart/ux2' );
data.field.uy2(:, :, :)  = h5read( restart_file_name,  '/restart/uy2' );
data.field.uz2(:, :, :)  = h5read( restart_file_name,  '/restart/uz2' );
data.field.rho2(:, :, :) = h5read( restart_file_name,  '/restart/rho2' );

end
